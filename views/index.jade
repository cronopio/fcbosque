section.slide
  h2 Node.JS
  hr
  h3 Daniel Aristizabal Romero [cronopio]
  h5 Fundacion Casa del Bosque
  img(src="/images/node_turtle.png")
  
section.slide
  h1 Introducción.
  
section.slide
  h1 Arquitectura Cliente-Servidor
  
section.slide
  h2 Arquitectura Cliente-Servidor
  hr
  img(src="/images/Cliente-Servidor.png")
  
section.slide
  h2 Conceptos Claves.
  hr
  ol
    li
      h3 TCP / IP
      p Conjunto de estándares báse de enrutamiento en Internet
    li
      h3 DNS
      p Sistema para la resolución de nombres de dominio.
    li
      h3 HTTP
      p Protocolo para el intercambio de información hipertextual.
    li
      h3 URL
      p Localizador Uniforme de Recursos.
      small
        em http://www.fcbosque.org/index/index.php
        
section.slide
  h1 ¿Node.js?
  
section.slide
  h2 ¿Qué es Node.JS?
  hr
  p Entorno de desarrollo orientado a eventos de entrada/salida (I/O) basado en 
    a(href="http://code.google.com/p/v8/") V8 
    | para la construcción de programas de red facilmente escalables.
  ul
    li
      h3 JavaScript en Server - Side
    li
      h3 Construido sobre 
        a(href="http://code.google.com/p/v8/") V8 
        | de 
        a(href="http://www.google.com.co") Google
    li
      h3 Orientado a eventos
    li
      h3 Similar a 
        a(href="http://rubyeventmachine.com/") EventMachine 
        | o 
        a(href="http://twistedmatrix.com/") Twisted
    li
      h3 Sistema de modulos CommonJS
    li
      h3 8000 lineas de C++, 2000 lineas de JS
    li
      h3 En 2009, 14 desarrolladores del core. Hoy 226
section.slide
  h1 ESPERA!!
    br
    | ¿JS en Server?
    br
    | WTF?!
section.slide
  h1 Orientado a Eventos.
section.slide
  h2 Bloqueo de I/O
  hr
  h3 Muchas aplicaciones web tienen codigo como este:
  blockquote
    span(style="color:#66CCFF") var 
    | r = db.query(
    span(style="color:#990000") 'select * from T'
    | );
    br
    code(style="color:#009900")
      // uso el $r
  h3 ¿Y qué hace el software mientras se hacen las consultas a la base de datos?
section.slide
  h1 En la mayoría de casos, solo esperar la respuesta.
section.slide
  h1 El buen software puede ser 
    br
    em multi-tarea.
section.slide
  h1 Otros 
    em hilos 
    | de ejecución pueden correr mientras esperan. 
section.slide
  h1 ¿Es lo mejor que podemos hacer?
section.slide
  h1 Demosle una mirada a 
    a(href="http://www.apache.org/") Apache 
    | y 
    a(href="http://nginx.org/") Nginx

//
  section.slide
    h2 Apache vs Nginx
    h3 Concurrencia vs Peticiones/s
    img(src="http://www.webfaction.com/blog/nginx-apache-reqs-sec.png")
    .sources Fuentes: 
      a(href="http://blog.webfaction.com/a-little-holiday-present")[1]

section.slide
  h2 Apache vs Nginx
  h3 Memoria RAM vs Conexiones Concurrentes
  img(src="http://www.webfaction.com/blog/nginx-apache-memory.png")
  .sources Fuentes: 
    a(href="http://blog.webfaction.com/a-little-holiday-present")[1]
section.slide
  h2 Apache vs Nginx
  h3 ¿La diferencia?
  ul
    li.slide 
      strong Apache 
      | usa 
      em un hilo por conexión.
    li.slide
      strong Nginx 
      em no usa hilos. 
      | Usa un bucle de eventos (event loop).
  ul
    li.slide Los cambios de 
      em contexto 
      | no son gratis.
    li.slide Las pilas de ejecución de tareas requieren memoria.
  ul
    li.slide Para concurrencia masiva, 
      mark no se puede 
      | usar un hilo del sistema operativo por cada conexión.
  ul
    li.slide La concurrencia usando hilos, es una abstraccion con fugas.
section.slide
  h2 Concurrencia de hilos
  h3 Código como este:
  blockquote
    span(style="color:#66CCFF") var 
    | r = db.query(
    span(style="color:#990000") 'select * from T'
    | );
    br
    code(style="color:#009900")
      // uso el $r
  h3 
    mark Bloquea el proceso entero 
    | o implica 
    mark la ejecución de pilas de tareas.
section.slide
  h3 Pero código como este:
  blockquote
    | db.query(
    span(style="color:#990000") "select ..."
    | , 
    span(style="color:#66CCFF") function
    | (r) {
    br
    code(style="color:#009900;margin-left:30px")
      // uso el r
    br
    | });
  h3 Permite al programa regresar al bucle de eventos inmediatamente.
  h3 ... y no necesita nada mas.
section.slide
  h1 Asi es como debe hacerse la entrada/salida (I/O)
section.slide
  h1 ...mmm ¿bucle de eventos?, me suena a
    br
    | JavaScript!
section.slide
  h2 JavaScript
  h3 JavaScript esta especialmente diseñado para ser usado como un bucle de eventos (event loop):
  ul
    li.slide Funciones anónimas, 
      em closures.
    li.slide Solo un 
      em callback 
      | al mismo tiempo.
    li.slide Entrada/Salida (I/O) a través de eventos en el DOM.
    li.slide La cultura del JavaScript normalmente usa programación orientada a eventos.
    .slide
      blockquote
        | “Un lenguaje que no tenga todo, 
        | es realmente facil programarlo para que lo haga.”
        br
        em(style="margin-left: 3em")    – Dennis Ritchie
section.slide
  h1 Volvamos a Node.JS...
section.slide
  h2 Stack
  img(src="/images/Stack.png")
section.slide
  h1 Instalación.
    br
    small (en gnu/linux)
section.slide
  h2 Instalación
  h3 Dependencias:
  ul
    li
      strong python  
      small
        em (recomendado 2.6)
    li
      strong libssl-dev 
      small
        em (si deseas usar SSL/TLS)
section.slide
  h2 Instalación
  h3 Descargando las fuentes:
  h4 Usando Git.
  pre
    code
       git clone git://github.com/joyent/node.git
       cd node/
       git checkout v0.4.12
  h4 Descargando un tarball.
  pre
    code
      wget -c https://github.com/joyent/node/tarball/v0.4.12 -O node-0.4.12.tar.gz
      tar zxvf node-0.4.12.tar.gz
      cd joyent-node-41e5762
  .sources
    a(href="https://github.com/joyent/node/wiki/Installation") Guía de Instalación Oficial 
    | -  
    a(href="http://apptob.org/") Script para instalación en Ubuntu.
section.slide
  h2 Instalación
  h3 Construcción:
  h4 Como usuario sin privilegios.
  pre
    code
      mkdir ~/local
      ./configure --prefix=~/local
      make -j2 # dependiendo del numero de cores.
      make install
      echo 'export PATH=$HOME/local/bin:$PATH' >> ~/.bashrc
      source ~/.bashrc
  h4 Como root.
  pre
    code
      su -
      ./configure
      make -j2 # dependiendo del numero de cores.
      make install
section.slide
  h2 Instalación
  h3 Node Package Manager (NPM)
  pre
    code
      curl http://npmjs.org/install.sh | sh
  h3 Instalando modulos o paquetes.
  pre
    code
      npm install express
  .sources
    a(href="http://www.npmjs.org/") Página NPM
section.slide
  h1 ¿Preguntas?
section.slide
  h1 Demos!!!
    br
    | :-)
section.slide
  h2 Hola Mundo.
  script(src="https://gist.github.com/1325350.js?file=sys.js")
section.slide
  h2 Callback
  script(src="https://gist.github.com/1325350.js?file=exit.js")
section.slide
  h2 Socket TCP
  h3 Servidor
  script(src="https://gist.github.com/1325350.js?file=tcp.js")
  h3 Cliente
  pre
    code telnet localhost 8000
section.slide
  h2 Consulta de dominios.
  h3 Servidor
  script(src="https://gist.github.com/1325350.js?file=dns.js")
  h3 Cliente
  pre
    code
     telnet localhost 8000
     ip fcbosque.org
     salir
section.slide
  h2 Servidor Web
  h3 Servidor
  script(src="https://gist.github.com/1325350.js?file=http.js")
  h3 Cliente
  pre
    code http://localhost:4000/
section.slide
  h1 Gracias!!